{"/home/travis/build/npmtest/node-npmtest-google-spreadsheet/test.js":"/* istanbul instrument in package npmtest_google_spreadsheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-spreadsheet/lib.npmtest_google_spreadsheet.js":"/* istanbul instrument in package npmtest_google_spreadsheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_spreadsheet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_spreadsheet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-spreadsheet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-spreadsheet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_spreadsheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_spreadsheet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_spreadsheet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_google_spreadsheet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_spreadsheet.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_google_spreadsheet.__dirname +\n                    '/lib.npmtest_google_spreadsheet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-spreadsheet/node_modules/google-spreadsheet/index.js":"var async = require(\"async\");\nvar request = require(\"request\");\nvar xml2js = require(\"xml2js\");\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\nvar _ = require('lodash');\nvar GoogleAuth = require(\"google-auth-library\");\n\nvar GOOGLE_FEED_URL = \"https://spreadsheets.google.com/feeds/\";\nvar GOOGLE_AUTH_SCOPE = [\"https://spreadsheets.google.com/feeds\"];\n\nvar REQUIRE_AUTH_MESSAGE = 'You must authenticate to modify sheet data';\n\n// The main class that represents a single sheet\n// this is the main module.exports\nvar GoogleSpreadsheet = function( ss_key, auth_id, options ){\n  var self = this;\n  var google_auth = null;\n  var visibility = 'public';\n  var projection = 'values';\n\n  var auth_mode = 'anonymous';\n\n  var auth_client = new GoogleAuth();\n  var jwt_client;\n\n  options = options || {};\n\n  var xml_parser = new xml2js.Parser({\n    // options carried over from older version of xml2js\n    // might want to update how the code works, but for now this is fine\n    explicitArray: false,\n    explicitRoot: false\n  });\n\n  if ( !ss_key ) {\n    throw new Error(\"Spreadsheet key not provided.\");\n  }\n\n  // auth_id may be null\n  setAuthAndDependencies(auth_id);\n\n  // Authentication Methods\n\n  this.setAuthToken = function( auth_id ) {\n    if (auth_mode == 'anonymous') auth_mode = 'token';\n    setAuthAndDependencies(auth_id);\n  }\n\n  // deprecated username/password login method\n  // leaving it here to help notify users why it doesn't work\n  this.setAuth = function( username, password, cb ){\n    return cb(new Error('Google has officially deprecated ClientLogin. Please upgrade this module and see the readme for more instrucations'))\n  }\n\n  this.useServiceAccountAuth = function( creds, cb ){\n    if (typeof creds == 'string') {\n      try {\n        creds = require(creds);\n      } catch (err) {\n        return cb(err);\n      }\n    }\n    jwt_client = new auth_client.JWT(creds.client_email, null, creds.private_key, GOOGLE_AUTH_SCOPE, null);\n    renewJwtAuth(cb);\n  }\n\n  function renewJwtAuth(cb) {\n    auth_mode = 'jwt';\n    jwt_client.authorize(function (err, token) {\n      if (err) return cb(err);\n      self.setAuthToken({\n        type: token.token_type,\n        value: token.access_token,\n        expires: token.expiry_date\n      });\n      cb()\n    });\n  }\n\n  this.isAuthActive = function() {\n    return !!google_auth;\n  }\n\n\n  function setAuthAndDependencies( auth ) {\n    google_auth = auth;\n    if (!options.visibility){\n      visibility = google_auth ? 'private' : 'public';\n    }\n    if (!options.projection){\n      projection = google_auth ? 'full' : 'values';\n    }\n  }\n\n  // This method is used internally to make all requests\n  this.makeFeedRequest = function( url_params, method, query_or_data, cb ){\n    var url;\n    var headers = {};\n    if (!cb ) cb = function(){};\n    if ( typeof(url_params) == 'string' ) {\n      // used for edit / delete requests\n      url = url_params;\n    } else if ( Array.isArray( url_params )){\n      //used for get and post requets\n      url_params.push( visibility, projection );\n      url = GOOGLE_FEED_URL + url_params.join(\"/\");\n    }\n\n    async.series({\n      auth: function(step) {\n        if (auth_mode != 'jwt') return step();\n        // check if jwt token is expired\n        if (google_auth.expires > +new Date()) return step();\n        renewJwtAuth(step);\n      },\n      request: function(result, step) {\n        if ( google_auth ) {\n          if (google_auth.type === 'Bearer') {\n            headers['Authorization'] = 'Bearer ' + google_auth.value;\n          } else {\n            headers['Authorization'] = \"GoogleLogin auth=\" + google_auth;\n          }\n        }\n\n        headers['Gdata-Version'] = '3.0';\n\n        if ( method == 'POST' || method == 'PUT' ) {\n          headers['content-type'] = 'application/atom+xml';\n        }\n\n        if (method == 'PUT' || method == 'POST' && url.indexOf('/batch') != -1) {\n          headers['If-Match'] = '*';\n        }\n\n        if ( method == 'GET' && query_or_data ) {\n          var query = \"?\" + querystring.stringify( query_or_data );\n          // replacements are needed for using structured queries on getRows\n          query = query.replace(/%3E/g,'>');\n          query = query.replace(/%3D/g,'=');\n          query = query.replace(/%3C/g,'<');\n          url += query;\n        }\n\n        request( {\n          url: url,\n          method: method,\n          headers: headers,\n          body: method == 'POST' || method == 'PUT' ? query_or_data : null\n        }, function(err, response, body){\n          if (err) {\n            return cb( err );\n          } else if( response.statusCode === 401 ) {\n            return cb( new Error(\"Invalid authorization key.\"));\n          } else if ( response.statusCode >= 400 ) {\n            var message = _.isObject(body) ? JSON.stringify(body) : body.replace(/&quot;/g, '\"');\n            return cb( new Error(\"HTTP error \"+response.statusCode+\" (\"+http.STATUS_CODES[response.statusCode])+\") - \"+message);\n          } else if ( response.statusCode === 200 && response.headers['content-type'].indexOf('text/html') >= 0 ) {\n            return cb( new Error(\"Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)\"));\n          }\n\n\n          if ( body ){\n            xml_parser.parseString(body, function(err, result){\n              if ( err ) return cb( err );\n              cb( null, result, body );\n            });\n          } else {\n            if ( err ) cb( err );\n            else cb( null, true );\n          }\n        })\n      }\n    });\n  }\n\n\n\n  // public API methods\n  this.getInfo = function( cb ){\n    self.makeFeedRequest( [\"worksheets\", ss_key], 'GET', null, function(err, data, xml) {\n      if ( err ) return cb( err );\n      if (data===true) {\n        return cb(new Error('No response to getInfo call'))\n      }\n      var ss_data = {\n        id: data.id,\n        title: data.title,\n        updated: data.updated,\n        author: data.author,\n        worksheets: []\n      }\n      var worksheets = forceArray(data.entry);\n      worksheets.forEach( function( ws_data ) {\n        ss_data.worksheets.push( new SpreadsheetWorksheet( self, ws_data ) );\n      });\n      self.info = ss_data;\n      self.worksheets = ss_data.worksheets;\n      cb( null, ss_data );\n    });\n  }\n\n  // NOTE: worksheet IDs start at 1\n\n  this.addWorksheet = function( opts, cb ) {\n    // make opts optional\n    if (typeof opts == 'function'){\n      cb = opts;\n      opts = {};\n    }\n\n    cb = cb || _.noop;\n\n    if (!this.isAuthActive()) return cb(new Error(REQUIRE_AUTH_MESSAGE));\n\n    var defaults = {\n      title: 'Worksheet '+(+new Date()),  // need a unique title\n      rowCount: 50,\n      colCount: 20\n    };\n\n    var opts = _.extend({}, defaults, opts);\n\n    // if column headers are set, make sure the sheet is big enough for them\n    if (opts.headers && opts.headers.length > opts.colCount) {\n      opts.colCount = opts.headers.length;\n    }\n\n    var data_xml = '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\"><title>' +\n        opts.title +\n      '</title><gs:rowCount>' +\n        opts.rowCount +\n      '</gs:rowCount><gs:colCount>' +\n        opts.colCount +\n      '</gs:colCount></entry>';\n\n    self.makeFeedRequest( [\"worksheets\", ss_key], 'POST', data_xml, function(err, data, xml) {\n      if ( err ) return cb( err );\n\n      var sheet = new SpreadsheetWorksheet( self, data );\n      self.worksheets = self.worksheets || [];\n      self.worksheets.push(sheet);\n      sheet.setHeaderRow(opts.headers, function(err) {\n        cb(err, sheet);\n      })\n    });\n  }\n\n  this.removeWorksheet = function ( worksheet_id, cb ){\n    if (!this.isAuthActive()) return cb(new Error(REQUIRE_AUTH_MESSAGE));\n    self.makeFeedRequest( [\"worksheets\", ss_key, worksheet_id], 'DELETE', cb );\n  }\n\n  this.getRows = function( worksheet_id, opts, cb ){\n    // the first row is used as titles/keys and is not included\n\n    // opts is optional\n    if ( typeof( opts ) == 'function' ){\n      cb = opts;\n      opts = {};\n    }\n\n\n    var query  = {}\n\n    if ( opts.offset ) query[\"start-index\"] = opts.offset;\n    else if ( opts.start ) query[\"start-index\"] = opts.start;\n\n    if ( opts.limit ) query[\"max-results\"] = opts.limit;\n    else if ( opts.num ) query[\"max-results\"] = opts.num;\n\n    if ( opts.orderby ) query[\"orderby\"] = opts.orderby;\n    if ( opts.reverse ) query[\"reverse\"] = 'true';\n    if ( opts.query ) query['sq'] = opts.query;\n\n    self.makeFeedRequest( [\"list\", ss_key, worksheet_id], 'GET', query, function(err, data, xml) {\n      if ( err ) return cb( err );\n      if (data===true) {\n        return cb(new Error('No response to getRows call'))\n      }\n\n      // gets the raw xml for each entry -- this is passed to the row object so we can do updates on it later\n\n      var entries_xml = xml.match(/<entry[^>]*>([\\s\\S]*?)<\\/entry>/g);\n\n\n      // need to add the properties from the feed to the xml for the entries\n      var feed_props = _.clone(data.$);\n      delete feed_props['gd:etag'];\n      var feed_props_str = _.reduce(feed_props, function(str, val, key){\n        return str+key+'=\\''+val+'\\' ';\n      }, '');\n      entries_xml = _.map(entries_xml, function(xml){\n        return xml.replace('<entry ', '<entry '+feed_props_str);\n      });\n\n      var rows = [];\n      var entries = forceArray( data.entry );\n      var i=0;\n      entries.forEach( function( row_data ) {\n        rows.push( new SpreadsheetRow( self, row_data, entries_xml[ i++ ] ) );\n      });\n      cb(null, rows);\n    });\n  }\n\n  this.addRow = function( worksheet_id, data, cb ){\n    var data_xml = '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">' + \"\\n\";\n    Object.keys(data).forEach(function(key) {\n      if (key != 'id' && key != 'title' && key != 'content' && key != '_links'){\n        data_xml += '<gsx:'+ xmlSafeColumnName(key) + '>' + xmlSafeValue(data[key]) + '</gsx:'+ xmlSafeColumnName(key) + '>' + \"\\n\"\n      }\n    });\n    data_xml += '</entry>';\n    self.makeFeedRequest( [\"list\", ss_key, worksheet_id], 'POST', data_xml, cb );\n  }\n\n  this.getCells = function (worksheet_id, opts, cb) {\n    // opts is optional\n    if (typeof( opts ) == 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    // Supported options are:\n    // min-row, max-row, min-col, max-col, return-empty\n    var query = _.assign({}, opts);\n\n\n    self.makeFeedRequest([\"cells\", ss_key, worksheet_id], 'GET', query, function (err, data, xml) {\n      if (err) return cb(err);\n      if (data===true) {\n        return cb(new Error('No response to getCells call'))\n      }\n\n      var cells = [];\n      var entries = forceArray(data['entry']);\n      var i = 0;\n      entries.forEach(function( cell_data ){\n        cells.push( new SpreadsheetCell( self, worksheet_id, cell_data ) );\n      });\n\n      cb( null, cells );\n    });\n  }\n};\n\n// Classes\nvar SpreadsheetWorksheet = function( spreadsheet, data ){\n  var self = this;\n\n  self.url = data.id;\n  self.id = data.id.substring( data.id.lastIndexOf(\"/\") + 1 );\n  self.title = data.title;\n  self.rowCount = parseInt(data['gs:rowCount']);\n  self.colCount = parseInt(data['gs:colCount']);\n\n  self['_links'] = [];\n  links = forceArray( data.link );\n  links.forEach( function( link ){\n    self['_links'][ link['$']['rel'] ] = link['$']['href'];\n  });\n  self['_links']['cells'] = self['_links']['http://schemas.google.com/spreadsheets/2006#cellsfeed'];\n  self['_links']['bulkcells'] = self['_links']['cells']+'/batch';\n\n  function _setInfo(opts, cb) {\n    cb = cb || _.noop;\n    var xml = ''\n      + '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\">'\n      + '<title>'+(opts.title || self.title)+'</title>'\n      + '<gs:rowCount>'+(opts.rowCount || self.rowCount)+'</gs:rowCount>'\n      + '<gs:colCount>'+(opts.colCount || self.colCount)+'</gs:colCount>'\n      + '</entry>';\n    spreadsheet.makeFeedRequest(self['_links']['edit'], 'PUT', xml, function(err, response) {\n      if (err) return cb(err);\n      self.title = response.title;\n      self.rowCount = parseInt(response['gs:rowCount']);\n      self.colCount = parseInt(response['gs:colCount']);\n      cb();\n    });\n  }\n\n  this.resize = _setInfo;\n  this.setTitle = function(title, cb) {\n    _setInfo({title: title}, cb);\n  }\n\n\n  // just a convenience method to clear the whole sheet\n  // resizes to 1 cell, clears the cell, and puts it back\n  this.clear = function(cb) {\n    var cols = self.colCount;\n    var rows = self.colCount;\n    self.resize({rowCount: 1, colCount: 1}, function(err) {\n      if (err) return cb(err);\n      self.getCells(function(err, cells) {\n        cells[0].setValue(null, function(err) {\n          if (err) return cb(err);\n          self.resize({rowCount: rows, colCount: cols}, cb);\n        });\n      })\n    });\n  }\n\n  this.getRows = function(opts, cb){\n    spreadsheet.getRows(self.id, opts, cb);\n  }\n  this.getCells = function(opts, cb) {\n    spreadsheet.getCells(self.id, opts, cb);\n  }\n  this.addRow = function(data, cb){\n    spreadsheet.addRow(self.id, data, cb);\n  }\n  this.bulkUpdateCells = function(cells, cb) {\n    var entries = cells.map(function (cell, i) {\n      cell._needsSave = false;\n      return \"<entry>\\n        <batch:id>\" + cell.batchId + \"</batch:id>\\n        <batch:operation type=\\\"update\\\"/>\\n        <id>\" + self['_links']['cells']+'/'+cell.batchId + \"</id>\\n        <link rel=\\\"edit\\\" type=\\\"application/atom+xml\\\"\\n          href=\\\"\" + cell._links.edit + \"\\\"/>\\n        <gs:cell row=\\\"\" + cell.row + \"\\\" col=\\\"\" + cell.col + \"\\\" inputValue=\\\"\" + cell.valueForSave + \"\\\"/>\\n      </entry>\";\n    });\n    var data_xml = \"<feed xmlns=\\\"http://www.w3.org/2005/Atom\\\"\\n      xmlns:batch=\\\"http://schemas.google.com/gdata/batch\\\"\\n      xmlns:gs=\\\"http://schemas.google.com/spreadsheets/2006\\\">\\n      <id>\" + self['_links']['cells'] + \"</id>\\n      \" + entries.join(\"\\n\") + \"\\n    </feed>\";\n\n    spreadsheet.makeFeedRequest(self['_links']['bulkcells'], 'POST', data_xml, function(err, data) {\n      if (err) return cb(err);\n\n      // update all the cells\n      var cells_by_batch_id = _.indexBy(cells, 'batchId');\n      if (data.entry && data.entry.length) data.entry.forEach(function(cell_data) {\n        cells_by_batch_id[cell_data['batch:id']].updateValuesFromResponseData(cell_data);\n      });\n      cb();\n    });\n  }\n  this.del = function(cb){\n    spreadsheet.makeFeedRequest(self['_links']['edit'], 'DELETE', null, cb);\n  }\n\n  this.setHeaderRow = function(values, cb) {\n    if (!values) return cb();\n    if (values.length > self.colCount){\n      return cb(new Error('Sheet is not large enough to fit '+values.length+' columns. Resize the sheet first.'));\n    }\n    self.getCells({\n      'min-row': 1,\n      'max-row': 1,\n      'min-col': 1,\n      'max-col': self.colCount,\n      'return-empty': true\n    }, function(err, cells) {\n      if (err) return cb(err);\n      _.each(cells, function(cell) {\n        cell.value = values[cell.col-1] ? values[cell.col-1] : '';\n      });\n      self.bulkUpdateCells(cells, cb);\n    });\n  }\n}\n\nvar SpreadsheetRow = function( spreadsheet, data, xml ){\n  var self = this;\n  self['_xml'] = xml;\n  Object.keys(data).forEach(function(key) {\n    var val = data[key];\n    if(key.substring(0, 4) === \"gsx:\") {\n      if(typeof val === 'object' && Object.keys(val).length === 0) {\n        val = null;\n      }\n      if (key == \"gsx:\") {\n        self[key.substring(0, 3)] = val;\n      } else {\n        self[key.substring(4)] = val;\n      }\n    } else {\n      if (key == \"id\") {\n        self[key] = val;\n      } else if (val['_']) {\n        self[key] = val['_'];\n      } else if ( key == 'link' ){\n        self['_links'] = [];\n        val = forceArray( val );\n        val.forEach( function( link ){\n          self['_links'][ link['$']['rel'] ] = link['$']['href'];\n        });\n      }\n    }\n  }, this);\n\n  self.save = function( cb ){\n    /*\n    API for edits is very strict with the XML it accepts\n    So we just do a find replace on the original XML.\n    It's dumb, but I couldnt get any JSON->XML conversion to work reliably\n    */\n\n    var data_xml = self['_xml'];\n    // probably should make this part more robust?\n    data_xml = data_xml.replace('<entry>', \"<entry xmlns='http://www.w3.org/2005/Atom' xmlns:gsx='http://schemas.google.com/spreadsheets/2006/extended'>\");\n      Object.keys( self ).forEach( function(key) {\n        if (key.substr(0,1) != '_' && typeof( self[key] == 'string') ){\n          data_xml = data_xml.replace( new RegExp('<gsx:'+xmlSafeColumnName(key)+\">([\\\\s\\\\S]*?)</gsx:\"+xmlSafeColumnName(key)+'>'), '<gsx:'+xmlSafeColumnName(key)+'>'+ xmlSafeValue(self[key]) +'</gsx:'+xmlSafeColumnName(key)+'>');\n        }\n    });\n    spreadsheet.makeFeedRequest( self['_links']['edit'], 'PUT', data_xml, cb );\n  }\n  self.del = function( cb ){\n    spreadsheet.makeFeedRequest( self['_links']['edit'], 'DELETE', null, cb );\n  }\n}\n\nvar SpreadsheetCell = function( spreadsheet, worksheet_id, data ){\n  var self = this;\n\n  function init() {\n    self.id = data['id'];\n    self.row = parseInt(data['gs:cell']['$']['row']);\n    self.col = parseInt(data['gs:cell']['$']['col']);\n    self.batchId = 'R'+self.row+'C'+self.col;\n\n    self['_links'] = [];\n    links = forceArray( data.link );\n    links.forEach( function( link ){\n      self['_links'][ link['$']['rel'] ] = link['$']['href'];\n    });\n\n    self.updateValuesFromResponseData(data);\n  }\n\n  self.updateValuesFromResponseData = function(_data) {\n    // formula value\n    var input_val = _data['gs:cell']['$']['inputValue'];\n    // inputValue can be undefined so substr throws an error\n    // still unsure how this situation happens\n    if (input_val && input_val.substr(0,1) === '='){\n      self._formula = input_val;\n    } else {\n      self._formula = undefined;\n    }\n\n    // numeric values\n    if (_data['gs:cell']['$']['numericValue'] !== undefined) {\n      self._numericValue = parseFloat(_data['gs:cell']['$']['numericValue']);\n    } else {\n      self._numericValue = undefined;\n    }\n\n    // the main \"value\" - its always a string\n    self._value = _data['gs:cell']['_'] || '';\n  }\n\n  self.setValue = function(new_value, cb) {\n    self.value = new_value;\n    self.save(cb);\n  };\n\n  self._clearValue = function() {\n    self._formula = undefined;\n    self._numericValue = undefined;\n    self._value = '';\n  }\n\n  self.__defineGetter__('value', function(){\n    return self._value;\n  });\n  self.__defineSetter__('value', function(val){\n    if (!val) return self._clearValue();\n\n    var numeric_val = parseFloat(val);\n    if (!isNaN(numeric_val)){\n      self._numericValue = numeric_val;\n      self._value = val.toString();\n    } else {\n      self._numericValue = undefined;\n      self._value = val;\n    }\n\n    if (typeof val == 'string' && val.substr(0,1) === '=') {\n      // use the getter to clear the value\n      self.formula = val;\n    } else {\n      self._formula = undefined;\n    }\n  });\n\n  self.__defineGetter__('formula', function() {\n    return self._formula;\n  });\n  self.__defineSetter__('formula', function(val){\n    if (!val) return self._clearValue();\n\n    if (val.substr(0,1) !== '=') {\n      throw new Error('Formulas must start with \"=\"');\n    }\n    self._numericValue = undefined;\n    self._value = '*SAVE TO GET NEW VALUE*';\n    self._formula = val;\n  });\n\n  self.__defineGetter__('numericValue', function() {\n    return self._numericValue;\n  });\n  self.__defineSetter__('numericValue', function(val) {\n    if (val === undefined || val === null) return self._clearValue();\n\n    if (isNaN(parseFloat(val)) || !isFinite(val)) {\n      throw new Error('Invalid numeric value assignment');\n    }\n\n    self._value = val.toString();\n    self._numericValue = parseFloat(val);\n    self._formula = undefined;\n  });\n\n  self.__defineGetter__('valueForSave', function() {\n    return xmlSafeValue(self._formula || self._value);\n  });\n\n  self.save = function(cb) {\n    self._needsSave = false;\n\n    var edit_id = 'https://spreadsheets.google.com/feeds/cells/key/worksheetId/private/full/R'+self.row+'C'+self.col;\n    var data_xml =\n      '<entry><id>'+self.id+'</id>'+\n      '<link rel=\"edit\" type=\"application/atom+xml\" href=\"'+self.id+'\"/>'+\n      '<gs:cell row=\"'+self.row+'\" col=\"'+self.col+'\" inputValue=\"'+self.valueForSave+'\"/></entry>'\n\n    data_xml = data_xml.replace('<entry>', \"<entry xmlns='http://www.w3.org/2005/Atom' xmlns:gs='http://schemas.google.com/spreadsheets/2006'>\");\n\n    spreadsheet.makeFeedRequest( self['_links']['edit'], 'PUT', data_xml, function(err, response) {\n      if (err) return cb(err);\n      self.updateValuesFromResponseData(response);\n      cb();\n    });\n  }\n\n  self.del = function(cb) {\n    self.setValue('', cb);\n  }\n\n  init();\n  return self;\n}\n\nmodule.exports = GoogleSpreadsheet;\n\n//utils\nvar forceArray = function(val) {\n  if ( Array.isArray( val ) ) return val;\n  if ( !val ) return [];\n  return [ val ];\n}\nvar xmlSafeValue = function(val){\n  if ( val == null ) return '';\n  return String(val).replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;');\n}\nvar xmlSafeColumnName = function(val){\n  if (!val) return '';\n  return String(val).replace(/[\\s_]+/g, '')\n      .toLowerCase();\n}\n\n\n\n"}